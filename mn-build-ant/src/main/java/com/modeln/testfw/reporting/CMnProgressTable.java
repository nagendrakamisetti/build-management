/*
 * Copyright 2000-2003 by Model N, Inc.  All Rights Reserved.
 * 
 * This software is the confidential and proprietary information
 * of Model N, Inc ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only
 * in accordance with the terms of the license agreement you
 * entered into with Model N, Inc.
 */
package com.modeln.testfw.reporting;

import com.modeln.build.ant.report.ProgressTarget;
import com.modeln.build.ant.report.ReportParseEvent;
import com.modeln.build.ant.report.ReportParseTarget;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.StringTokenizer;
import java.util.Vector;
import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.Location;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Target;


/**
 * The table interface defines all of the methods and fields used
 * to interact with the build database. 
 * 
 * @author  Shawn Stafford
 */
public class CMnProgressTable {

    /** Timestamp used to prefix every test message line */
    protected static final SimpleDateFormat DATETIME = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


    /** Name of the table containing progress listener entries */
    private String groupTable = "build_progress_group";

    /** Name of the column that identifies a progress group entry */
    public static final String GROUP_ID = "group_id";

    /** Name of the column that identifies the host where the progress entry was logged */
    public static final String HOSTNAME = "hostname";

    /** Name of the column that specifies the build version number */
    public static final String BUILD_VERSION = "build_version";


    /** Name of the table containing build progress events. */
    private String progressTable = "build_progress";

    /** Name of the column that identifies a single progress log entry */
    public static final String PROGRESS_ID = "progress_id";

    /** Name of the column that identifies the name of the progress entry */
    public static final String DISPLAY_NAME = "display_name";

    /** Name of the column that specifies the date and time when the entry was logged */
    public static final String START_DATE = "start_date";

    /** Name of the column that specifies the date and time when the entry was completed */
    public static final String END_DATE = "end_date";



    /**
     * Construct the table access object with the default table names.
     */
    public CMnProgressTable() {
    }


    /**
     * Set the name of the build progress group table.
     *
     * @param  name   Table name
     */
    public void setGroupTable(String name) {
        groupTable = name;
    }

    /**
     * Return the name of the build progress group table.
     *
     * @return   Table name
     */
    public String getGroupTable() {
        return groupTable;
    }


    /**
     * Set the name of the build progress table.
     *
     * @param  name   Table name
     */
    public void setProgressTable(String name) {
        progressTable = name;
    }

    /**
     * Return the name of the build progress table.
     *
     * @return   Table name
     */
    public String getProgressTable() {
        return progressTable;
    }


    /**
     * Add information about the listener to the build database.
     *
     * @param   conn        Database connection
     * @param   version     Build version string
     * @param   hostname    Host where the target was executed
     * @return  Autogenerated primary key for the inserted database row
     */
    public synchronized int addListener(
            Connection conn,
            String version,
            String hostname)
        throws SQLException
    {
        String startDate = DATETIME.format(new Date());
        int groupId = 0;

        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO " + groupTable + " ");
        sql.append("(" + BUILD_VERSION);
        sql.append(", " + HOSTNAME);
        sql.append(", " + START_DATE);
        sql.append(") VALUES ");

        sql.append("(\"" + version + "\"");
        sql.append(", \"" + hostname + "\"");
        sql.append(", \"" + startDate + "\")");

        Statement st = conn.createStatement();
        ResultSet rs = null;
        try {
            st.execute(sql.toString(), Statement.RETURN_GENERATED_KEYS);
            rs = st.getGeneratedKeys();
            if (rs != null) {
                rs.first();
                groupId = rs.getInt(1);
            } else {
                 System.err.println("Unable to obtain generated key.");
            }
        } catch (SQLException ex) {
            System.err.println("Failed to add criteria: " + sql.toString());
            ex.printStackTrace();
        }

        return groupId;
    }




    /**
     * Add information about the current Ant target to the build database. 
     *
     * @param   conn        Database connection
     * @param   gid         Foreign key to the progress group table 
     * @param   indicator   Information about the matching progress indicator 
     * @param   target      Ant target information 
     * @return  Autogenerated primary key for the inserted database row
     */
    public synchronized int addTarget(
            Connection conn, 
            int gid, 
            ProgressTarget indicator, 
            Target target)
        throws SQLException
    {
        Location targetLocation = target.getLocation();

        String file = targetLocation.getFileName();
        int line = targetLocation.getLineNumber();
        int hash = targetLocation.hashCode();

        String targetName = target.getName();
        String startDate = DATETIME.format(new Date());
        int progressId = 0; 

        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO " + progressTable + " ");
        sql.append("(" + GROUP_ID);
        sql.append(", " + DISPLAY_NAME);
        sql.append(", " + START_DATE);
        sql.append(") VALUES ");

        sql.append("(\"" + gid + "\"");
        sql.append(", \"" + indicator.getDisplayName() + "\"");
        sql.append(", \"" + startDate + "\")");

        Statement st = conn.createStatement();
        ResultSet rs = null;
        try {
            st.execute(sql.toString(), Statement.RETURN_GENERATED_KEYS);
            rs = st.getGeneratedKeys();
            if (rs != null) {
                rs.first();
                progressId = rs.getInt(1);
            } else {
                 System.err.println("Unable to obtain generated key.");
            }
        } catch (SQLException ex) {
            System.err.println("Failed to add criteria: " + sql.toString());
            ex.printStackTrace();
        }

        return progressId;
    }


    /**
     * Update the current Ant target in the build database the the current progress.
     *
     * @param   conn        Database connection
     * @param   id          Primary key for the progress table entry 
     * @param   indicator   Information about the matching progress indicator
     * @param   target      Ant target information
     * @return  Autogenerated primary key for the inserted database row
     */
    public synchronized void updateTarget(Connection conn, int id, ProgressTarget indicator, Target target)
        throws SQLException
    {
        String endDate = DATETIME.format(new Date());
        int progressId = 0;

        StringBuffer sql = new StringBuffer();
        sql.append("UPDATE " + progressTable + " ");
        sql.append("SET " + END_DATE + " = \"" + endDate + "\" ");
        sql.append("WHERE  " + PROGRESS_ID + " = \"" + id + "\" ");

        Statement st = conn.createStatement();
        ResultSet rs = null;
        try {
            st.execute(sql.toString());
        } catch (SQLException ex) {
            System.err.println("Failed to add criteria: " + sql.toString());
            ex.printStackTrace();
        }

    }

    /**
     * Return a list of progress entries for the specified group. 
     *
     * @param   conn    Database connection
     * @param   gid     Group ID 
     *
     * @return  List of progress entries
     */
    public synchronized Vector getProgressList(Connection conn, int gid)
        throws SQLException
    {
        Vector list = new Vector();

        StringBuffer sql = new StringBuffer();
        sql.append(
            "SELECT * FROM " + progressTable +
            " WHERE " + GROUP_ID + " = " + gid + 
            " ORDER BY " + START_DATE + " ASC"
        );

        Statement st = conn.createStatement();
        try {
            ResultSet rs = st.executeQuery(sql.toString());
            if (rs != null) {
                while (rs.next()) {
                    list.add(parseProgressData(rs));
                }
            } else {
                 System.err.println("Unable to obtain a list of progress entries.");
            }
        } catch (SQLException ex) {
            System.err.println("Failed to obtain progress entry list.");
            ex.printStackTrace();
        }

        return list;
    }


    /**
     * Return the most recent progress group for the specified host.
     *
     * @param   conn    Database connection
     * @param   host    Name of the host
     *
     * @return  List of progress groups 
     */
    public synchronized Vector getLatestProgressByHost(Connection conn, String host)
        throws SQLException
    {
        Vector list = null;

        StringBuffer sql = new StringBuffer();
        sql.append(
            "SELECT * FROM " + groupTable +
            " WHERE " + HOSTNAME + " = '" + host + "'" +
            " ORDER BY " + START_DATE + " DESC LIMIT 1"
        );

        Statement st = conn.createStatement();
        try {
            ResultSet rs = st.executeQuery(sql.toString());
            if (rs != null) {
                // Obtain the latest group to be registered
                CMnDbProgressGroupData group = parseGroupData(rs);
                list = getProgressList(conn, group.getId());
            } else {
                 System.err.println("Unable to obtain progress group information.");
            }
        } catch (SQLException ex) {
            System.err.println("Failed to obtain progress group information.");
            ex.printStackTrace();
        }

        return list;
    }

    /**
     * Parse the result set to obtain group information.
     *
     * @param   rs    Result set containing group data
     * @return  Information obtained from the result set
     */
    public CMnDbProgressGroupData parseGroupData(ResultSet rs)
        throws SQLException
    {
        CMnDbProgressGroupData data = new CMnDbProgressGroupData();

        int id = rs.getInt(groupTable + "." + GROUP_ID);
        data.setId(id);

        Date startTime = rs.getTimestamp(groupTable + "." + START_DATE);
        data.setStartTime(startTime);

        String version = rs.getString(groupTable + "." + BUILD_VERSION);
        data.setBuildVersion(version);

        String hostname = rs.getString(groupTable + "." + HOSTNAME);
        data.setHostname(hostname);

        return data;
    }


    /**
     * Parse the result set to obtain progress entry information.
     *
     * @param   rs    Result set containing group data
     * @return  Information obtained from the result set
     */
    public CMnDbProgressData parseProgressData(ResultSet rs)
        throws SQLException
    {
        CMnDbProgressData data = new CMnDbProgressData();

        int id = rs.getInt(progressTable + "." + PROGRESS_ID);
        data.setId(id);

        int gid = rs.getInt(progressTable + "." + GROUP_ID);
        data.setGroupId(gid);

        Date startTime = rs.getTimestamp(progressTable + "." + START_DATE);
        data.setStartTime(startTime);

        Date endTime = rs.getTimestamp(progressTable + "." + END_DATE);
        data.setEndTime(endTime);

        String displayName = rs.getString(progressTable + "." + DISPLAY_NAME);
        data.setDisplayName(displayName);

        return data;
    }


}

