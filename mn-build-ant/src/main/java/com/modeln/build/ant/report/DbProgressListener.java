/*
 * Copyright 2000-2003 by Model N, Inc.  All Rights Reserved.
 *
 * This software is the confidential and proprietary information
 * of Model N, Inc ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only
 * in accordance with the terms of the license agreement you
 * entered into with Model N, Inc.
 */
package com.modeln.build.ant.report;

import com.modeln.testfw.reporting.CMnProgressTable;

import java.io.File;
import java.io.FileWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Enumeration;
import java.util.Stack;
import java.util.Vector;
import java.util.EventObject;

import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildException;
import org.apache.tools.ant.BuildListener;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.Target;


/**
 * Logs calls to Ant tasks in a database. 
 *
 * @author Shawn Stafford
 */
public class DbProgressListener implements BuildListener {

    /** Connection to the build database */
    private Connection dbConnection;

    /** Database query object */
    private CMnProgressTable dbTable;

    /** Unique ID used to identify the corresponding build in the database */
    private String buildId;

    /** Name of the host where this build project has been executed */
    private String hostname;

    /** List of regular expressions to search for */
    private Vector progressTargets;

    /** Autogenerated primary key used to uniquely identify the listener group */
    private int groupId = 0;

    /** List of progress indicator primary keys that have been added to the database */
    private Stack keys = new Stack();


    /**
     * Construct a log listener that stores log events in the database.
     *
     * @param   conn    Connection to the build database
     * @param   build   Build version or other unique ID
     * @param   list    List of regular expressions to search for 
     * @param   table   Database query object
     * @throws  BuildException if the hostname cannot be determined
     */
    public DbProgressListener(Connection conn, String build, Vector list, CMnProgressTable table) 
        throws BuildException
    {
        dbConnection = conn;
        buildId = build;
        progressTargets = list;
        dbTable = table;

        // Obtain the local hostname
        try {
            hostname = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException hostex) {
            throw new BuildException("Unable to obtain the name of the current host.");
        }

        // Register the listener in the database
        try {
            groupId = dbTable.addListener(dbConnection, buildId, hostname);
        } catch (SQLException sqe) {
            throw new BuildException("Unable to add progress listener entries to the build database.");
        }
    }

    /**
     * Signals that a build has started. This event
     * is fired before any targets have started.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     */
    public void buildStarted(BuildEvent event) {
    }

    /**
     * Signals that the last target has finished. This event
     * will still be fired if an error occurred during the build.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getException()
     */
    public void buildFinished(BuildEvent event) {
    }

    /**
     * Signals that a target is starting.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getTarget()
     */
    public void targetStarted(BuildEvent event) {
        Target currentTarget = event.getTarget();
        try {
            ProgressTarget match = getProgressIndicator(currentTarget);
            if (match != null) {
                int id = dbTable.addTarget(dbConnection, groupId, match, currentTarget);
                keys.push(new Integer(id));
            }
        } catch (SQLException sqe) {
            System.err.println("Unable to add target progress to the database.");
            sqe.printStackTrace();
        }

    }

    /**
     * Signals that a target has finished. This event will
     * still be fired if an error occurred during the build.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getException()
     */
    public void targetFinished(BuildEvent event) {
        Target currentTarget = event.getTarget();
        Integer currentKey = null;
        try {
            ProgressTarget match = getProgressIndicator(currentTarget);
            if (match != null) {
                if (!keys.empty()) {
                    currentKey = (Integer) keys.pop();
                    dbTable.updateTarget(dbConnection, currentKey.intValue(), match, currentTarget);
                } else {
                    throw new BuildException("Attempt to update a non-existent progress entry in the database.");
                }
            }
        } catch (SQLException sqe) {
            System.err.println("Unable to update target progress in the database.");
            sqe.printStackTrace();
        }
    }

    /**
     * Signals that a task is starting.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getTask()
     */
    public void taskStarted(BuildEvent event) {
    }

    /**
     * Signals that a task has finished. This event will still
     * be fired if an error occurred during the build.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getException()
     */
    public void taskFinished(BuildEvent event) {
    }

    /**
     * Signals a message logging event.
     *
     * @param event An event with any relevant extra information.
     *              Must not be <code>null</code>.
     *
     * @see BuildEvent#getMessage()
     * @see BuildEvent#getPriority()
     */
    public void messageLogged(BuildEvent event) {
    }


    /**
     * Iterate through each of the progress targets to determine if the
     * specified Ant target matches a target in the list.
     *
     * @param   target    Ant target
     * @return  TRUE if the Ant target matches a desired target
     */
    public boolean isProgressIndicator(Target target) {
        return (getProgressIndicator(target) != null);
    }

    /**
     * Iterate through each of the progress targets and return the first 
     * indicator which matches the specified Ant target.  If no match is
     * found, null is returned.
     *
     * @param   target    Ant target
     * @return  First matching indicator or NULL if no matches are found 
     */
    public ProgressTarget getProgressIndicator(Target target) {
        ProgressTarget currentTarget = null;
        Enumeration list = progressTargets.elements();
        while (list.hasMoreElements()) {
            currentTarget = (ProgressTarget) list.nextElement();
            if (currentTarget.matches(target)) {
                return currentTarget;
            }
        }

        return null;
    }


}

