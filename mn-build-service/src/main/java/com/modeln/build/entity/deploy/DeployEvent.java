package com.modeln.build.entity.deploy;

import java.util.Date;

import javax.persistence.Access;
import javax.persistence.AccessType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Index;
import javax.validation.constraints.NotNull;

import com.modeln.build.enums.build.EventLevel;

/**
 * This entity represents deploy events. Basically it collects deployed application executions logs from the continuous integration system.
 * These logs are parsed and linked to event criterias that help understanding the state of the continuous integration system execution tasks.
 * 
 * It is important to note that this table is frequently cleaned by CRON jobs. 
 * Also, the parsing step that links event entries with event criteria is done outside of the system by ant scripts.
 * 
 * The deployEvent entity only collect information from steps that are executed in parallel on deployed application.
 * 
 * Logs generated before the application can be deployed on multiple application servers or Logs generated by one server only in serial mode are saved in the build_event table.
 * 
 * Deployed build can be used to run test or analysis tools in parallel on multiple servers. 
 * Deployed build can be used by QAs so they can perform manual testing.
 * 
 * This class represents the deploy_event table. 
 * 
 * CREATE TABLE IF NOT EXISTS `deploy_event` (
 *   `event_id` int(10) unsigned NOT NULL auto_increment,
 *   `criteria_id` int(10) unsigned NOT NULL default '0',
 *   `event_level` enum('debug','verbose','information','warning','error') NOT NULL default 'debug',
 *   `event_date` datetime NOT NULL default '0000-00-00 00:00:00',
 *   `event_message` text,
 *   PRIMARY KEY  (`event_id`),
 *   KEY `criteria_idx` (`criteria_id`),
 *   KEY `date_idx` (`event_date`)
 * );
 * 
 * Many enum columns have been converted to String on the java side but are still mapped to Java enum through getter and setter.
 * - event_level is mapped to enum com.modeln.build.enums.build.EventLevel.
 *
 * Index names have been changed by appending original name with the table table name. This is required by JPA in order to avoid error messages.
 * 
 * TODO
 * - Add build_version and event_stack field/column in db in order to link logs to a specific build.
 * - Todos for BuildEvent also applies here.
 * 
 * @author gzussa
 *
 */
@Entity
@Table(name="deploy_event", indexes={/*@Index(name="deploy_event_build_idx", columnList="build_version"),*/
		@Index(name="deploy_event_criteria_idx", columnList="criteria_id"),
		@Index(name="deploy_event_date_idx", columnList="event_date")})
@Access(AccessType.FIELD)
public class DeployEvent {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name="event_id")
	private Integer id;
	
	@ManyToOne(fetch=FetchType.LAZY)
	@JoinColumn(name="criteria_id")
	@NotNull
	private DeployEventCriteria criteria;
	
//	@Column(name="build_version")
//	@NotNull
//	private String buildVersion;
	
//	@Column(name="event_stack")
//	@Lob
//	private String stack;
	
	@Column(name="event_level")
	@NotNull
	private String level;
	
	@Column(name="event_date")
	@Temporal(TemporalType.TIMESTAMP)
	@NotNull
	private Date date;
	
	@Column(name="event_message")
	@Lob
	private String message;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public DeployEventCriteria getCriteria() {
		return criteria;
	}

	public void setCriteria(DeployEventCriteria criteria) {
		this.criteria = criteria;
	}

//	public String getBuildVersion() {
//		return buildVersion;
//	}
//
//	public void setBuildVersion(String buildVersion) {
//		this.buildVersion = buildVersion;
//	}

//	public String getStack() {
//		return stack;
//	}
//
//	public void setStack(String stack) {
//		this.stack = stack;
//	}

	public EventLevel getLevel() {
		return EventLevel.valueOf(level.toUpperCase());
	}

	public void setLevel(EventLevel level) {
		this.level = level.getName().toLowerCase();
	}

	public Date getDate() {
		return date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

}
