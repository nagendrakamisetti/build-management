/*
 * ApplicationException.java
 *
 * Copyright 2002 by Shawn Stafford (sstafford@modeln.com)
 * All rights reserved.
 */
package com.modeln.build.web.errors;


import java.util.*;
import java.io.*;

/**
 * ApplicationException should be used to handle errors thrown by the
 * application classes.  The information in the exception should be used
 * to describe the following information about the error:
 * <p>
 * <table>
 *   <tr><td valign="top">Error Code</td><td valign="top">Application error code</td></tr>
 *   <tr><td valign="top">Error Message</td><td valign="top">A debugging message generated by the application to help debug problems.</td></tr>
 * </table>
 * <p>
 *
 * All of this information should be populated when throwing the 
 * ApplicationException.  It will eventually be mapped to an internal
 * error object which can then be displayed to the user.
 * <p>
 * 
 * @version            $Revision: 1.1.1.1 $
 * @author             Shawn Stafford
 *
 */

public class ApplicationException extends Exception {

    /**
     * An error code which corresponds to an entry within the list of
     * application error codes.  This code will be used to locate the
     * most appropriate error message within the strings files.
     */
    private int errorCode;

    /**
     * Stack trace used to trace the exception.
     */
    private String stackTrace;

    /**
     * Constructs an exception and specifies the error code which 
     * identifies the error within the application, and the error 
     * message which can be used to debug the error within the 
     * application.
     * 
     * @param   code        Application error code
     * @param   msg         Message used to debug the error
     * 
     */
    public ApplicationException(int code, String msg) {
        super(msg);
        errorCode = code;
        setStackTrace(this);
    }

    /**
     * Sets the stack trace from the stack trace by using the stack
     * trace of the given exception.
     *
     * @param   exception   Contains the new stack trace info
     */
    public void setStackTrace(Exception exception) {
        stackTrace = getStackTrace(exception);
    }

    /**
     * Returns the application error code associated with the exception.
     *
     * @return int application error code 
     */
    public int getErrorCode() { 
        return errorCode; 
    }

    /**
     * Returns the stack trace for the exception.
     * 
     * @return stack trace of the exception
     */
    public String getOriginalStackTrace() { 
        return stackTrace; 
    }

    /**
     * Returns the stack trace for any exception as a string.
     *
     * @param   exception   object to retrieve the trace from
     * @return stack trace of the exception
     */
    public static String getStackTrace(Exception e) {
        // Obtain the stack trace for the error
        StringWriter out = new StringWriter();
        e.printStackTrace(new PrintWriter(out));
        return out.toString();
    }
}
